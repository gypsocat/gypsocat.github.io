<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CPP 学习-1-The Cherno CppSeries</title>
    <url>/2024/10/31/CPP-%E5%AD%A6%E4%B9%A0-1-The-Cherno-CppSeries/</url>
    <content><![CDATA[<h2 id="与-“”引用的区别"><a href="#与-“”引用的区别" class="headerlink" title="&lt;&gt; 与 “”引用的区别"></a>&lt;&gt; 与 “”引用的区别</h2><blockquote>
<p>“”</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/gypsocat/img/202410241645119.png" alt="image-20241024164406720"></p>
<blockquote>
<p>&lt;&gt;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/gypsocat/img/202410241648981.png" alt="image-20241024164804178"></p>
<p><img src="https://cdn.jsdelivr.net/gh/gypsocat/img/202410241649023.png" alt="image-20241024164916065"></p>
<h2 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> Singleton* s_Instance;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> Singleton&amp; <span class="title">Get</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> *s_Instance;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton* Singleton::s_Instance = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">	Singleton::<span class="built_in">Get</span>().<span class="built_in">hello</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************/</span></span><br><span class="line"><span class="comment">//另一种写法</span></span><br><span class="line"><span class="comment">/*    class Singleton</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    public:</span></span><br><span class="line"><span class="comment">        static Singleton&amp; Get()&#123;</span></span><br><span class="line"><span class="comment">            static Singleton instance;</span></span><br><span class="line"><span class="comment">            return instance;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        void hello()&#123;&#125;;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">	Singleton::<span class="built_in">Get</span>().<span class="built_in">hello</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>比如我们有一个类——Entity,如果不手动定义一个构造函数，那么编译器会默认为我们构造一个空的构造函数</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每创建一个实例就会调用这个构造函数</span></span><br><span class="line"><span class="built_in">Entity</span>()&#123;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">float</span> x, y;</span><br><span class="line">	<span class="built_in">Entity</span>(<span class="type">float</span> x, <span class="type">float</span> y)&#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; X &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; Y &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//为了实现print其实也可以直接把print放在构造函数里</span></span><br><span class="line"><span class="comment">//缺点：每创建一次实例就会调用一次print</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Entity <span class="title">e</span><span class="params">(<span class="number">10.0f</span>, <span class="number">5.0f</span>)</span></span>;</span><br><span class="line">    e.<span class="built_in">Print</span>();</span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Log</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Log</span>()&#123;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//Log() = delete; 这句代码可以去掉这个类的构造函数</span></span><br><span class="line"><span class="comment">//删去构造函数之后使用 类似的Log l创造实例会报错</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Write</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">float</span> x, y;</span><br><span class="line">	<span class="built_in">Entity</span>()&#123;</span><br><span class="line">	X = <span class="number">0.0f</span>;</span><br><span class="line">	Y = <span class="number">0.0f</span>; </span><br><span class="line">     std::cout &lt;&lt; <span class="string">&quot;Created Entity !&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; X &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; Y &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Entity</span>()&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Destroyed Entity !&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Entity e;</span><br><span class="line">    e.<span class="built_in">Print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">Function</span>();</span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>手动调用析构函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">e.~<span class="built_in">Entity</span>();</span><br></pre></td></tr></table></figure>



<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">float</span> X, Y;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">(<span class="type">float</span> xa, <span class="type">float</span> ya)</span></span>&#123;</span><br><span class="line">		X += xa;</span><br><span class="line">        Y += ya;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* Name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PrintName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; Name &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><blockquote>
<p>用于实现继承关系中子类（派生类）对父类（基类）方法的重写</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">std::string <span class="title">GetName</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="string">&quot;Entity&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string m_Name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Player</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">		: <span class="built_in">m_Name</span>(name) &#123;&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function">std::string <span class="title">GetName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> m_Name; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Entity* e = <span class="keyword">new</span> <span class="built_in">Entity</span>(); </span><br><span class="line">    std::cout &lt;&lt; e-&gt;<span class="built_in">GetName</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    Player* p = <span class="keyword">new</span> <span class="built_in">Player</span>(<span class="string">&quot;Cherno&quot;</span>);</span><br><span class="line">    std::cout &lt;&lt; p-&gt;<span class="built_in">GetName</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *Entity* entity = p;</span></span><br><span class="line"><span class="comment">     *std::cout &lt;&lt; entity-&gt;GetName() &lt;&lt; std::endl;//输出为Entity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码还可以写成</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">std::string <span class="title">GetName</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="string">&quot;Entity&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string m_Name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Player</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">		: <span class="built_in">m_Name</span>(name) &#123;&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function">std::string <span class="title">GetName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> m_Name; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintName</span><span class="params">(Entity* entity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; entity-&gt;<span class="built_in">GetName</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Entity* e = <span class="keyword">new</span> <span class="built_in">Entity</span>(); </span><br><span class="line">    <span class="built_in">PrintName</span>(e);</span><br><span class="line">    </span><br><span class="line">    Player* p = <span class="keyword">new</span> <span class="built_in">Player</span>(<span class="string">&quot;Cherno&quot;</span>);</span><br><span class="line">    <span class="built_in">PrintName</span>(p); <span class="comment">//这个地方p既是Player类型也是Entity类型</span></span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当你运行上述两段代码你会发现，对于Entity均输出了两次，因为总是优先去该类（Entity类里找GetName函数），所以为了让Player和Entity中的GetName各司其职，我们可以引入虚函数，实现覆写(override)需要将基类中的基函数标记为虚函数</p>
<p>于是修改代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">GetName</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="string">&quot;Entity&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string m_Name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Player</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">		: <span class="built_in">m_Name</span>(name) &#123;&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function">std::string <span class="title">GetName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;<span class="keyword">return</span> m_Name; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>事实上我们没写override前，依然可以输出我们想要的结果，但是加上override可以提高代码可读性并且方便进行debug，比如函数名拼写错误，会报error（因为基函数里根本没有这个函数）</p>
<blockquote>
<p>此处有一种C++语法——<strong>初始化列表</strong></p>
<p>初始化列表是 C++ 中的一种语法，用来在构造函数中直接初始化类的成员变量。它的语法是在构造函数的参数列表和函数体之间使用冒号 <code>:</code>，后面跟随成员变量的初始化方式。</p>
<ul>
<li><p><strong>可以提高性能</strong>，可以先对类成员变量进行赋值，再用默认构造函数创建一个空字符串。</p>
</li>
<li><p>强制初始化：有些类的成员变量必须通过初始化列表进行初始化。例如：</p>
<ul>
<li>const成员变量（不能在构造函数体中赋值，只能在初始化列表中初始化）</li>
<li>引用类型成员变量（必须在创建时就被初始化，无法通过赋值修改）</li>
</ul>
</li>
<li><p>初始化的顺序只与在类中的声明顺序有关，与初始化列表中的顺序无关</p>
</li>
</ul>
<p><code>ClassName(参数列表) : 类成员1(参数), 类成员2(参数), ...  &#123;     // 构造函数体 &#125;</code></p>
<p><strong>关于new</strong></p>
<p>常见用法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">classname* example = <span class="keyword">new</span> <span class="built_in">classname</span>(); <span class="comment">//delete example </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">5</span>);<span class="comment">//delete p</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>]<span class="comment">//分配大小为10的整型数组 delete[] arr</span></span><br></pre></td></tr></table></figure>



<p><strong>new与malloc的对比</strong></p>
<ol>
<li><p>构造函数和析构函数的调用</p>
<ul>
<li><code>new</code> 会调用类对象的构造函数，而 <code>malloc</code> 只分配内存，不会调用构造函数。</li>
<li>释放时，<code>delete</code> 会调用析构函数，而 <code>free</code> 不会调用析构函数。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Entity* e1 = <span class="keyword">new</span> <span class="built_in">Entity</span>();  <span class="comment">// 调用构造函数</span></span><br><span class="line"><span class="keyword">delete</span> e1;                  <span class="comment">// 调用析构函数</span></span><br><span class="line"></span><br><span class="line">Entity* e2 = (Entity*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Entity));  <span class="comment">// 仅分配内存，不调用构造函数</span></span><br><span class="line"><span class="built_in">free</span>(e2);                                      <span class="comment">// 仅释放内存，不调用析构函数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类型安全</p>
<ul>
<li><code>new</code> 会返回具体类型的指针，不需要进行显式类型转换。</li>
<li><code>malloc</code> 返回 <code>void*</code>，需要进行强制类型转换。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p1 = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">5</span>);  <span class="comment">// 不需要强制转换</span></span><br><span class="line"><span class="type">int</span>* p2 = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));  <span class="comment">// 需要强制转换</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>内存分配失败处理</p>
<ul>
<li>如果 <code>new</code> 分配内存失败，会抛出 <code>std::bad_alloc</code> 异常。</li>
<li><code>malloc</code> 返回 <code>NULL</code>，需要检查返回值是否为 <code>NULL</code>。</li>
</ul>
</li>
</ol>
<p>注：**<code>nothrow</code> 形式**：如果不希望 <code>new</code> 抛出异常，可以使用 <code>nothrow</code> 形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="built_in">new</span>(std::nothrow) <span class="type">int</span>;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Memory allocation failed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;`</span><br></pre></td></tr></table></figure>

<p>当内存分配失败时，new会返回nullptr而不是抛出异常</p>
</blockquote>
<h2 id="纯虚函数（接口）"><a href="#纯虚函数（接口）" class="headerlink" title="纯虚函数（接口）"></a>纯虚函数（接口）</h2><p>允许我们在基类中定义一个没有实现的函数，然后强制子类去实现该函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">GetName</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//意味着这个函数成为了纯虚函数，并且必须在一个子类中实现，如果想要实例化一个子类，则这个子类需要实现这个函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string m_Name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Player</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">		: <span class="built_in">m_Name</span>(name) &#123;&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function">std::string <span class="title">GetName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;<span class="keyword">return</span> m_Name; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Printable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">GetClassName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> : <span class="keyword">public</span> Printable</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">GetName</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="string">&quot;Entity&quot;</span>; &#125;</span><br><span class="line">	<span class="function">std::string <span class="title">GetClassName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;<span class="keyword">return</span> <span class="string">&quot;Entity&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//class Player : public Entity, Printable实现一个接口，如果Player不是继承于Entity的话，必须实现这个接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string m_Name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Player</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">		: <span class="built_in">m_Name</span>(name) &#123;&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function">std::string <span class="title">GetName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;<span class="keyword">return</span> m_Name; &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">GetClassName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;<span class="keyword">return</span> <span class="string">&quot;Player&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Printable* obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; obj-&gt;<span class="built_in">GetClassName</span>() &lt;&lt; std::endl;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Entity* e = <span class="keyword">new</span> <span class="built_in">Entity</span>(); </span><br><span class="line">    </span><br><span class="line">    Player* p = <span class="keyword">new</span> <span class="built_in">Player</span>(<span class="string">&quot;Cherno&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="字符串字面量"><a href="#字符串字面量" class="headerlink" title="字符串字面量"></a>字符串字面量</h2><blockquote>
<p>字符串字面量是存储在内存中的只读部分的</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化字符串</span></span><br><span class="line">    std::string name = <span class="string">&quot;cherno&quot;</span>;</span><br><span class="line">    name += <span class="string">&quot;hello&quot;</span>;<span class="comment">//等同于 std::string name = std::string(&quot;cherno&quot;) + &quot;hello&quot;;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name1 =<span class="string">&quot;cherno&quot;</span>;</span><br><span class="line">    <span class="type">char</span> name3[] = <span class="string">&quot;cherno&quot;</span>;</span><br><span class="line">    <span class="comment">//此处字符串还是存在内存的只读部分的</span></span><br><span class="line">    <span class="comment">//修改时创造了一个新的变量即(name3)进行copy再修改而不是直接对常量字符串进行修改</span></span><br><span class="line">    name3[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>；</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std::string_literals;</span><br><span class="line">    std::string name0 = <span class="string">U&quot;cherno&quot;</span>s + <span class="string">U&quot;hello&quot;</span>;<span class="comment">//相当于std::u32string  name0</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* example = <span class="string">R&quot;(Line1</span></span><br><span class="line"><span class="string">    Line2</span></span><br><span class="line"><span class="string">    Line3</span></span><br><span class="line"><span class="string">    Line4)&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上述在双引号前加R等价于下面的代码</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* ex = <span class="string">&quot;Line1\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Line2\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Line3\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="C-中的const"><a href="#C-中的const" class="headerlink" title="C++中的const"></a>C++中的const</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>* a <span class="comment">//不能修改该指针指向的内容 和int const* a同义</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> a <span class="comment">//可以修改指针指向的内存中的数据，但不能修改指针的值</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> a;<span class="comment">//指针的内容和指针指向的内存中的数据都不能修改</span></span><br></pre></td></tr></table></figure>

<p>类中的const(下列中的用法只能在类中)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_X, m_Y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetX</span><span class="params">()</span> <span class="type">const</span><span class="comment">//承诺不会修改类成员变量，只读</span></span></span><br><span class="line"><span class="function">    </span>&#123;	<span class="comment">//m_X = 2; 类似的句子会报错</span></span><br><span class="line">        <span class="keyword">return</span> m_X;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span>* m_X, m_Y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//指针的内容和指针指向的内存中的数据都不能修改</span></span><br><span class="line"><span class="comment">//并且函数也不能修改类中的内容，只能读取</span></span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> <span class="title">GetX</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;	</span><br><span class="line">        <span class="keyword">return</span> m_X;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* x, y; <span class="comment">//x为int*类型，y为int类型</span></span><br><span class="line"><span class="type">int</span>*x, *y; <span class="comment">//x,y均为int* 类型</span></span><br></pre></td></tr></table></figure>

<p>const的高级用法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> m_X, m_Y;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> var;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">GetX</span><span class="params">()</span> <span class="type">const</span><span class="comment">//常量方法</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">         var = <span class="number">2</span>;<span class="comment">//设置为mutable就可以修改，即使在常量方法中</span></span><br><span class="line">		<span class="keyword">return</span> m_X;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">GetX</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_X;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintEntity</span><span class="params">(<span class="type">const</span> Entity&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line"><span class="comment">//默认调用int GetX() const</span></span><br><span class="line"><span class="comment">//调用int GetX()会报错，因为不能确保这个函数不修改变量	</span></span><br><span class="line">	std::cout &lt;&lt; e.<span class="built_in">GetX</span>() &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Entity e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="mutable"><a href="#mutable" class="headerlink" title="mutable"></a>mutable</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类中的mutable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string m_Name;</span><br><span class="line">	<span class="keyword">mutable</span> <span class="type">int</span> m_DebugCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">	<span class="function"><span class="type">const</span> std::string&amp; <span class="title">GetName</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_DebugCount++;</span><br><span class="line">		<span class="keyword">return</span> m_Name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> Entity e;</span><br><span class="line">	e.<span class="built_in">GetName</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="成员初始化列表"><a href="#成员初始化列表" class="headerlink" title="成员初始化列表"></a>成员初始化列表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string m_Name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Entity</span>()</span><br><span class="line">		: <span class="built_in">m_Name</span>(<span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Entity</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">        : <span class="built_in">m_Name</span>(name)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> std::string&amp; <span class="title">GetName</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> m_Name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Entity e0;</span><br><span class="line">    std::cout &lt;&lt; e<span class="number">0.</span><span class="built_in">GetName</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    Entity e1;</span><br><span class="line">    std::cout &lt;&lt; e<span class="number">1.</span><span class="built_in">GetName</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过以下代码了解为什么要使用 <strong>成员初始化列表</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Example</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Created Entity!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Entity</span>(<span class="type">int</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Created Entity with&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string m_Name;</span><br><span class="line">    Example m_Example;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Entity</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_Name = std::<span class="built_in">string</span>(<span class="string">&quot;Unknown&quot;</span>);</span><br><span class="line">        m_Example = <span class="built_in">Example</span>(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* Entity()</span></span><br><span class="line"><span class="comment"> *		: m_Example(Example(8))</span></span><br><span class="line"><span class="comment"> *  &#123;</span></span><br><span class="line"><span class="comment"> *      m_Name = std::string(&quot;Unknown&quot;);</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *	将上述构造函数换成注释函数，输出结果为 Created Entity with 8!</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">    <span class="built_in">Entity</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">        : <span class="built_in">m_Name</span>(name)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">const</span> std::string&amp; <span class="title">GetName</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_Name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Entity e0;</span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Created Entity!</span><br><span class="line">Created Entity with 8!</span><br></pre></td></tr></table></figure>



<h2 id="隐式转换implicit与explicit关键字"><a href="#隐式转换implicit与explicit关键字" class="headerlink" title="隐式转换implicit与explicit关键字"></a>隐式转换implicit与explicit关键字</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Entity</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">		: <span class="built_in">m_Name</span>(name) &#123;&#125;</span><br><span class="line">	<span class="built_in">Entity</span>(<span class="type">int</span> age)</span><br><span class="line">		: <span class="built_in">m_Name</span>(<span class="string">&quot;Unknown&quot;</span>), <span class="built_in">m_Age</span>(age)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintEntity</span><span class="params">(<span class="type">const</span> Entity&amp; entity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Printing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PrintEntity</span>(<span class="number">22</span>);</span><br><span class="line">    <span class="built_in">PrintEntity</span>(<span class="built_in">Entity</span>(<span class="string">&quot;Cherno&quot;</span>))</span><br><span class="line">        </span><br><span class="line">    Entity a = <span class="string">&quot;Cherno&quot;</span>;</span><br><span class="line">    Entity b = <span class="number">22</span>;</span><br><span class="line">  <span class="comment">//常用写法</span></span><br><span class="line">  <span class="comment">//Entity a(&quot;Cherno&quot;)；</span></span><br><span class="line">  <span class="comment">//Entity b(22);</span></span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>explicit可以禁用上述的隐式构造，用法：放在构造函数之前</p>
</blockquote>
<p>所以上述代码可以变为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">Entity</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span></span></span><br><span class="line"><span class="function">		: m_Name(name) &#123;</span>&#125;</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">Entity</span><span class="params">(<span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function">		: m_Name(<span class="string">&quot;Unknown&quot;</span>), m_Age(age)</span></span><br><span class="line"><span class="function">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintEntity</span><span class="params">(<span class="type">const</span> Entity&amp; entity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Printing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PrintEntity</span>(<span class="number">22</span>);<span class="comment">//会报错</span></span><br><span class="line">    <span class="built_in">PrintEntity</span>(<span class="built_in">Entity</span>(<span class="string">&quot;Cherno&quot;</span>))</span><br><span class="line">        </span><br><span class="line">    Entity a = <span class="string">&quot;Cherno&quot;</span>;<span class="comment">//会报错</span></span><br><span class="line">    Entity b = <span class="number">22</span>;<span class="comment">//会报错必须修改为显示调用构造函数，例如下面注释掉的代码</span></span><br><span class="line">    <span class="comment">//Entity a(&quot;Cherno&quot;)；</span></span><br><span class="line">    <span class="comment">//Entity b(22);</span></span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="运算符及其重载"><a href="#运算符及其重载" class="headerlink" title="运算符及其重载"></a>运算符及其重载</h2><blockquote>
<p>没有使用运算符重载前</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> x, y;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Vector2</span>(<span class="type">float</span> x, <span class="type">float</span> y)</span><br><span class="line">        : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">    <span class="function">Vector2 <span class="title">Add</span><span class="params">(<span class="type">const</span> Vector2&amp; other)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector2</span>(x + other.x, y+ other.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Vector2 <span class="title">Multiply</span><span class="params">(<span class="type">const</span> Vector2&amp; other)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector2</span>(x * other.x, y * other.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Vector2 <span class="title">position</span><span class="params">(<span class="number">4.0f</span>, <span class="number">4.0f</span>)</span></span>;</span><br><span class="line">    <span class="function">Vector2 <span class="title">speed</span><span class="params">(<span class="number">0.5f</span>, <span class="number">1.5f</span>)</span></span>;</span><br><span class="line">    <span class="function">Vector2 <span class="title">powerup</span><span class="params">(<span class="number">1.1f</span>, <span class="number">1.1f</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    Vector2 result = position.<span class="built_in">Add</span>(speed.<span class="built_in">Multiply</span>(powerup));</span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>进行运算符重载</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> x, y;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Vector2</span>(<span class="type">float</span> x, <span class="type">float</span> y)</span><br><span class="line">        : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">    <span class="function">Vector2 <span class="title">Add</span><span class="params">(<span class="type">const</span> Vector2&amp; other)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector2</span>(x + other.x, y+ other.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Vector2 <span class="keyword">operator</span>+(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Add</span>(other);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Vector2 <span class="title">Multiply</span><span class="params">(<span class="type">const</span> Vector2&amp; other)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector2</span>(x * other.x, y * other.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Vector2 <span class="keyword">operator</span>*(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Multiply</span>(other);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Vector2&amp; other) cosnt</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == other.x &amp;&amp; y == other.y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Vector2&amp; other) cosnt</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//return operator==(other);</span></span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> == other);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x== other.x &amp;&amp; y == other.y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//return operator==(other)</span></span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> == other);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="type">const</span> Vector2&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">	stream &lt;&lt; other.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; other.y;</span><br><span class="line">    <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Vector2 <span class="title">position</span><span class="params">(<span class="number">4.0f</span>, <span class="number">4.0f</span>)</span></span>;</span><br><span class="line">    <span class="function">Vector2 <span class="title">speed</span><span class="params">(<span class="number">0.5f</span>, <span class="number">1.5f</span>)</span></span>;</span><br><span class="line">    <span class="function">Vector2 <span class="title">powerup</span><span class="params">(<span class="number">1.1f</span>, <span class="number">1.1f</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    Vector2 result1 = position.<span class="built_in">Add</span>(speed.<span class="built_in">Multiply</span>(powerup));</span><br><span class="line">    Vector2 result2 = position + speed * powerup;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(result1 == result2)</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; result2 &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数调用也可以进行重载，因为调用方式非常类似于函数调用，所以又称仿函数</p>
<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintEntity</span><span class="params">(<span class="type">const</span> Entity&amp; e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    Entity(int x, int y)</span></span><br><span class="line"><span class="comment">//        : x(x), y(y)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//	  &#125;</span></span><br><span class="line">    <span class="built_in">Entity</span>(<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">        : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">         <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">           </span><br><span class="line">         Entity&amp; e = *<span class="keyword">this</span>;   </span><br><span class="line">            </span><br><span class="line">         <span class="built_in">PrintEntity</span>(*<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetX</span><span class="params">()</span> cosnt</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">         <span class="type">const</span> Entity&amp; e = *<span class="keyword">this</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintEntity</span><span class="params">(<span class="type">const</span> Entity&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Print</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="对象的生存期（栈作用域生存期）"><a href="#对象的生存期（栈作用域生存期）" class="headerlink" title="对象的生存期（栈作用域生存期）"></a>对象的生存期（栈作用域生存期）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//作用域指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Entity</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Entity created.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Entity</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Entity destroyed.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScopedPtr</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Entity* m_Ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ScopedPtr</span>(Entity* ptr)</span><br><span class="line">        : <span class="built_in">m_Ptr</span>(ptr) </span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">ScopedPtr</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_Ptr; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;	</span><br><span class="line">        <span class="comment">//相同的写法</span></span><br><span class="line">        <span class="comment">//ScopedPtr e(new Entity());</span></span><br><span class="line">        ScopedPtr e = <span class="keyword">new</span> <span class="built_in">Entity</span>(); <span class="comment">// 修正构造函数的调用</span></span><br><span class="line">    &#125; <span class="comment">// 在这里作用域结束，ScopedPtr 会自动释放 Entity 的内存</span></span><br><span class="line"></span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="智能指针（smart-ptr）"><a href="#智能指针（smart-ptr）" class="headerlink" title="智能指针（smart_ptr）"></a>智能指针（smart_ptr）</h2><blockquote>
<p>实现自动化new &amp; delete堆上内存</p>
<p>最简单的智能指针 unique_ptr,   unique_ptr不能被复制,因为多个unique_ptr会导致内存被释放后，其他unique_ptr处于没有引用的悬空</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Entity</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Entity created.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Entity</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Entity destroyed.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//std::unique_ptr&lt;Entity&gt; entity(new Entity());</span></span><br><span class="line">        <span class="comment">//相较于上述代码，这个代码可以防止构造函数异常导致的没有引用的悬空指针</span></span><br><span class="line">        std::unique_ptr&lt;Entity&gt; entity = std::<span class="built_in">make_unique</span>&lt;Entity&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>shared_ptr 可以实现引用计数，只有当引用次数为0之后，才会释放堆上new的内存</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Entity</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Entity created.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Entity</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Entity destroyed.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        std::shared_ptr&lt;Entity&gt; e0;</span><br><span class="line">        &#123;</span><br><span class="line">            std::shared_ptr&lt;Entity&gt; sharedEntity = std::<span class="built_in">make_shared</span>&lt;Entity&gt;();</span><br><span class="line">            e0 = sharedEntity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//程序执行到此处才释放entity，打印台输出Entity destroyed.</span></span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>weak_ptr 类似于shared_ptr ，但weak_ptr不会增加引用次数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Entity</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Entity created.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Entity</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Entity destroyed.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        std::weak_ptr&lt;Entity&gt; e0;</span><br><span class="line">        &#123;</span><br><span class="line">            std::shared_ptr&lt;Entity&gt; sharedEntity = std::<span class="built_in">make_shared</span>&lt;Entity&gt;();</span><br><span class="line">            e0 = sharedEntity;</span><br><span class="line">        &#125;<span class="comment">//程序执行到此处就释放entity，打印台输出Entity destroyed.</span></span><br><span class="line">    &#125;</span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="C-拷贝构造函数"><a href="#C-拷贝构造函数" class="headerlink" title="C++拷贝构造函数"></a>C++拷贝构造函数</h2><blockquote>
<p>浅拷贝</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_Buffer;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> m_Size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* string)</span><br><span class="line">    &#123;</span><br><span class="line">    	m_Size = <span class="built_in">strlen</span>(string);</span><br><span class="line">        m_Buffer = <span class="keyword">new</span> <span class="type">char</span>[m_Size + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(m_Buffer, string, m_Size);</span><br><span class="line">        m_Buffer[m_Size] = <span class="number">0</span>;<span class="comment">//如果不能保证原字符串最后有0，就手动添加，而不是复制原字符串末尾的</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] m_Buffer;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>&amp; <span class="keyword">operator</span>[](<span class="type">unsigned</span> <span class="type">int</span> index)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">return</span> m_Buffer[index];    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="type">const</span> String&amp; string);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="type">const</span> String&amp; string)</span><br><span class="line">&#123;</span><br><span class="line">	stream &lt;&lt; string.m_Buffer;</span><br><span class="line">    <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String string = <span class="string">&quot;Cherno&quot;</span>;</span><br><span class="line">    <span class="comment">//添加了这个代码后，程序运行结束时会报错</span></span><br><span class="line">    <span class="comment">//原因是second类的 char* m_Buffer和string指向了同一块区域，所以两个类的析构函数共delete同一个区域两次了</span></span><br><span class="line">    <span class="comment">//浅拷贝，只复制了值，没有保证都是不同的内存</span></span><br><span class="line">    String second = string;</span><br><span class="line">    </span><br><span class="line">    second[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">    std::cout &lt;&lt; string &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; second &lt;&lt; std::endl; </span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>深拷贝–拷贝构造函数,c++默认提供的拷贝构造函数为浅拷贝</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_Buffer;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> m_Size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* string)</span><br><span class="line">    &#123;</span><br><span class="line">    	m_Size = <span class="built_in">strlen</span>(string);</span><br><span class="line">        m_Buffer = <span class="keyword">new</span> <span class="type">char</span>[m_Size + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(m_Buffer, string, m_Size);</span><br><span class="line">        m_Buffer[m_Size] = <span class="number">0</span>;<span class="comment">//如果不能保证原字符串最后有0，就手动添加，而不是复制原字符串末尾的</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//C++ 提供的浅拷贝类似于下方的代码</span></span><br><span class="line">   <span class="comment">// String(const String&amp; other)</span></span><br><span class="line">   <span class="comment">//     : m_Buffer(other.m_Buffer), m_Size(other.m_Size)</span></span><br><span class="line">   <span class="comment">// &#123;</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">//浅拷贝还可以写成</span></span><br><span class="line">   <span class="comment">//	 String(const String&amp; other)</span></span><br><span class="line">   <span class="comment">// &#123;</span></span><br><span class="line">   <span class="comment">//      memcpy(this, &amp;other, sizeof(String));</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">     <span class="built_in">String</span>(<span class="type">const</span> String&amp; other)</span><br><span class="line">         : <span class="built_in">m_Size</span>(other.m_Size)</span><br><span class="line">    &#123;</span><br><span class="line">         std::cout &lt;&lt; <span class="string">&quot;Copied String!&quot;</span>;</span><br><span class="line">         m_Buffer = <span class="keyword">new</span> <span class="type">char</span>[m_Size + <span class="number">1</span>];</span><br><span class="line">         <span class="built_in">memcpy</span>(m_Buffer, other.m_Buffer, m_Size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] m_Buffer;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>&amp; <span class="keyword">operator</span>[](<span class="type">unsigned</span> <span class="type">int</span> index)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">return</span> m_Buffer[index];    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="type">const</span> String&amp; string);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="type">const</span> String&amp; string)</span><br><span class="line">&#123;</span><br><span class="line">	stream &lt;&lt; string.m_Buffer;</span><br><span class="line">    <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintString</span><span class="params">(String string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; string &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String string = <span class="string">&quot;Cherno&quot;</span>;</span><br><span class="line">    <span class="comment">//添加了这个代码后，程序运行结束时会报错</span></span><br><span class="line">    <span class="comment">//原因是second类的 char* m_Buffer和string指向了同一块区域，所以两个类的析构函数共delete同一个区域两次了</span></span><br><span class="line">    <span class="comment">//浅拷贝，只复制了值，没有保证都是不同的内存</span></span><br><span class="line">    String second = string;</span><br><span class="line">    </span><br><span class="line">    second[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">PrintString</span>(string);</span><br><span class="line">    <span class="built_in">PrintString</span>(second);</span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果输出——事实上PrintString函数在使用时进行了两次拷贝，可以通过引用来避免</p>
<img src="https://cdn.jsdelivr.net/gh/gypsocat/img/202410302051606.png" alt="image-20241030184729178" style="zoom:50%;" />

<h2 id="C-箭头操作符"><a href="#C-箭头操作符" class="headerlink" title="C++箭头操作符"></a>C++箭头操作符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> <span class="type">const</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;Hello!&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScopedPtr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">    Entity* m_Obj;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ScopedPtr</span>(Entity* entity)</span><br><span class="line">        : <span class="built_in">m_Obj</span>(entity)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ~<span class="built_in">ScopedPtr</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_Obj;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Entity* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_Obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> Entity* <span class="keyword">operator</span>-&gt;() <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_Obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> ScopedPtr entity = <span class="keyword">new</span> <span class="built_in">Entity</span>();</span><br><span class="line">    entity-&gt;<span class="built_in">Print</span>();</span><br><span class="line">    </span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过箭头操作符来获得内存中某个值的偏移量</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector3</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">float</span> x, y, z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> offset = (<span class="type">int</span>)&amp;((Vector3*)<span class="literal">nullptr</span>)-&gt;z;<span class="comment">//输出为8</span></span><br><span class="line">	std::cout &lt;&lt; offset &lt;&lt; std::endl;</span><br><span class="line">	</span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="C-动态数组"><a href="#C-动态数组" class="headerlink" title="C++动态数组"></a>C++动态数组</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vertex</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> x, y ,z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="type">const</span> Vertex&amp; vertex)</span><br><span class="line">&#123;</span><br><span class="line">    stream &lt;&lt; vertex.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vertex.y &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vertex.z;</span><br><span class="line">    <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//确保通过引用传递参数，这样不会在其他函数调用该数组进行复制，减少开销</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">(<span class="type">const</span> std::vector&lt;Vertex&gt;&amp; vertices)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::vector&lt;Vertex&gt; vertices;</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;);</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(&#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;);</span><br><span class="line">    <span class="built_in">Function</span>(vertices);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i  = <span class="number">0</span>; i &lt; vertices.<span class="built_in">size</span>(); i++)</span><br><span class="line">   		std::cout &lt;&lt; vertices[i] &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    vertices.<span class="built_in">erase</span>(vertices.<span class="built_in">begin</span>() + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(Vertex v : vertices)</span><br><span class="line">        std::cout &lt;&lt; v &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CPP-Learning</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>The Cherno CppSeries</tag>
      </tags>
  </entry>
</search>
